<# 
*******************************************************************************************************************
Authored Date:    Sept 2016
Original Author:  Graham Jensen
*************************
*******************************************************************************************************************
Purpose of Script:
   Applies Annotations gathered by the GatherHostInfo Script back to the vCenter
  
   Prompted inputs:               vCenterName, VMHostName
   Uses files which where generated by
   "GatherHostInfo.ps1":    $USERPROFILE$\Documents\HostUpgradeInfo\$VMHost\Annotations\VMAnnotations-<HostName>.csv
                            $USERPROFILE$\Documents\HostUpgradeInfo\$VMHost\Annotations\VMHost-<HostName>.csv
*******************************************************************************************************************  
Prerequisites:

    #1  This script uses the VMware modules installed by the installation of VMware PowerCLI
        ENSURE that VMware PowerCLI has been installed.  
    
        Installation media can be found here: 
        \\cihs.ad.gov.on.ca\tbs\Groups\ITS\DCO\RHS\RHS\Software\VMware

    #2  To complete necessary tasks this script will require C3 account priviledges
        you will be prompted for your C3 account and password.  The Get-Credential method
        is used for this, so credentials are maintained securely.

===================================================================================================================
Update Log:   Please use this section to document changes made to this script
===================================================================================================================
-----------------------------------------------------------------------------
Update <Date>
   Author:    <Name>
   Description of Change:
      <Description>
-----------------------------------------------------------------------------
*******************************************************************************************************************
#>

# +------------------------------------------------------+
# |        Load VMware modules if not loaded             |
# +------------------------------------------------------+
"Loading VMWare Modules"
$ErrorActionPreference="SilentlyContinue" 
if ( !(Get-Module -Name VMware.VimAutomation.Core -ErrorAction SilentlyContinue) ) {
    if (Test-Path -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\VMware, Inc.\VMware vSphere PowerCLI' ) {
        $Regkey = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\VMware, Inc.\VMware vSphere PowerCLI'
       
    } else {
        $Regkey = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware vSphere PowerCLI'
    }
    . (join-path -path (Get-ItemProperty  $Regkey).InstallPath -childpath 'Scripts\Initialize-PowerCLIEnvironment.ps1')
}
$ErrorActionPreference="Continue"

# -----------------------
# Define Global Variables
# -----------------------
$Global:Folder = $env:USERPROFILE+"\Documents\HostUpgradeInfo" 
$Global:WorkFolder = $null
$Global:VCName = $null
$Global:HostName = $null
$Global:RunDate = Get-Date
$Global:RunAgain = $null
$Global:Creds = $null

#*****************
# Get VC from User
#*****************
Function Get-VCenter {
    #Prompt User for vCenter
    Write-Host "Enter the FQHN of the vCenter that the host currently resides in: " -ForegroundColor "Yellow" -NoNewline
    $Global:VCName = Read-Host 
}
#*******************
# EndFunction Get-VC
#*******************

#*************
# Get HostName
#*************
Function Get-HostName {
    #Prompt User for ESXi Host
    Write-Host "Enter the FQHN of the ESXi Host you want to appy annotations to: " -ForegroundColor "Yellow" -NoNewLine
    $Global:HostName = Read-Host
}
#*************************
# EndFunction Get-HostName
#*************************

#*******************
# Connect to vCenter
#*******************
Function Connect-vCenter {
    "Connecting to $Global:VCName"
    Connect-VIServer $Global:VCName -Credential $Global:Creds > $null
}
#****************************
# EndFunction Connect-vCenter
#****************************

#*******************
# Disconnect vCenter
#*******************
Function Disconnect-vCenter {
    "Disconnecting $Global:VCName"    
    Disconnect-VIServer -Server $Global:VCName -Confirm:$false
}
#*******************************
# EndFunction Disconnect-vCenter
#*******************************


#******************
# Apply Annotations
#******************
Function Apply-Annotations {

    #Import values for Host Annotations from CSV and apply to new VC
    Import-Csv -Path "$Global:WorkFolder\Annotations\VMHost-$Global:HostName.csv" | Where-Object {$_.Value} | ForEach-Object {
    Get-VMHOST $_.VM | Set-Annotation -CustomAttribute $_.Name -Value $_.Value
    }

    #Import values for VM Annotations from CSV and apply to new VC
    Import-Csv -Path "$Global:WorkFolder\Annotations\VMAnnotations-$Global:HostName.csv" | Where-Object {$_.Value} | ForEach-Object {
    Get-VM $_.VM | Set-Annotation -CustomAttribute $_.Name -Value $_.Value
    }
}
#******************************
# EndFunction Apply-Annotations
#******************************

#*************************
# Prompt for Running Again
#*************************
Function Run-Again {
    Write-Host "Do you have another Host to apply annotations to " -ForeGroundColor "Yellow" -NoNewLine
    Write-Host "(y/n)" -ForeGroundColor "Red" -NoNewLine
    Write-Host ": " -ForeGroundColor "Yellow" -NoNewLine
    $Global:RunAgain = Read-Host 
    $Global:RunAgain = $Global:RunAgain.Substring(0,1).ToLower()

}

#*********************
# Clean Up after Run
#*********************
Function Clean-Up {
    $Global:Folder = $null
    $Global:WorkFolder = $null
    $Global:VCName = $null
    $Global:HostName = $null
    $Global:RunDate = $null
    $Global:Creds = $null
}


#***************
# Execute Script
#***************
CLS
$ErrorActionPreference="SilentlyContinue"
Stop-Transcript | out-null
$ErrorActionPreference="Continue"
Start-Transcript -path $Global:Folder\ApplyHostAnnotations.txt
"================================================="
" "
$Global:Creds = Get-Credential
CLS
Get-VCenter
$Global:RunAgain = "y"
Connect-vCenter
CLS
Do {
    Get-HostName
    CLS
    $Global:WorkFolder = "$Global:Folder\$Global:HostName"
    Apply-Annotations
    Run-Again
    } While ($Global:RunAgain -eq "y")
Disconnect-vCenter
Clean-Up
Stop-Transcript